" LaTeX: Disable LaTeX-Box so I can use vimtex
let g:polyglot_disabled = ['latex']
" LaTeX: enable snippets by setting latex filetype
let g:tex_flavor = "latex"

" Spaces around comments
let g:NERDSpaceDelims = 1

let mapleader = ","
let maplocalleader = ";;"
noremap ; :

" Key code delays should be shorter
set timeout timeoutlen=200 ttimeoutlen=10

" Enable repeated indenting in visual mode
vmap < <gv
vmap > >gv

" gq should indent multi-line bulleted lists properly
set autoindent

" Extended regex "very magic"
nnoremap / /\v
vnoremap / /\v
cnoremap %s/ %smagic/
cnoremap >s/ >smagic/ 
nnoremap :g/ :g/\v
nnoremap :g// :g//

" Emacs-like beginning and end of line
inoremap <C-a> <Esc>^i
nnoremap <C-a> ^
inoremap <C-e> <Esc>$i
nnoremap <C-e> $

" Tab Next/Prev
nnoremap H :tabp<CR>
nnoremap L :tabn<CR>

" Don't backup files edited in /tmp, so I can edit crontab
set backupskip=/tmp/*,/private/tmp/*"

" System Clipboard
let s:uname = system("echo -n \"$(uname)\"")
if !v:shell_error && s:uname == "Darwin"
  set clipboard=unnamed "this works on osx
else
  set clipboard=unnamedplus "Integration with system clipboard. + is copy and * is select
endif

"folding settings " toggle folds with za  ... also use zR and zM and zr and zm
set foldmethod=manual   "fold based on indent
set foldnestmax=3       "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

set mouse=a " Use mouse in all modes

" When opening a file in the command bar, tab completion behaves like bash
" autocomplete
set wildmode=longest,list,full
set wildmenu

" Freak out when lines are more than 80 chars long
autocmd FileType python highlight OverLength ctermbg=red ctermfg=white guibg=#592929
autocmd FileType python match OverLength /\%80v.\+/
set colorcolumn=80

" Scala settings
let g:scala_sort_across_groups=1

" Vimux (commands to create a tmux pane underneath vim and run shell commands) " Run the current file
map <Leader>vo :call VimuxRunCommand("")<CR>
map <Leader>vr :call VimuxRunCommand("clear; echo Executing: " . bufname("%") . " ; ./" . bufname("%"))<CR>
" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>
" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>
" Close vim tmux runner opened by VimuxRunCommand
map <Leader>vq :VimuxCloseRunner<CR>
" Interrupt any command running in the runner pane
map <Leader>vx :VimuxInterruptRunner<CR>
" Zoom the runner pane (use <bind-key> z to restore runner pane)
map <Leader>vz :call VimuxZoomRunner()<CR>
function! VimuxSlime()
  call VimuxSendText(@v)
  call VimuxSendKeys("Enter")
endfunction
" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <Leader>vs "vy :call VimuxSlime()<CR>
" Select current line and send it to tmux
nmap <Leader>vs V<Leader>vs
" Select current block (paragraph) and send it to tmux
nmap <Leader>vb vip<Leader>vs
let g:VimuxUseNearestPane = 1

" R-vim-plugin
let vimrplugin_assign_map = "__"  "don't not take my stinkin underscores away!

" Ctags  ( the stuff that lets you jump to source function via Ctrl-] )
set tags=.tags;/

" Ctags TagBar R support
let g:tagbar_type_r = {
    \ 'ctagstype' : 'r',
    \ 'kinds'     : [
        \ 'f:Functions',
        \ 'g:GlobalVariables',
        \ 'v:FunctionVariables',
    \ ]
\ }

" vim-autoformat whole file
nmap <Leader>af :Autoformat<CR>
" vim-autoformat line under cursor
nmap <Leader>sf V:Autoformat<CR>
vmap <Leader>af :Autoformat<CR>

" Python-mode plugin should use python3 syntax checking
let g:pymode_python = 'python3'
let g:pymode_paths = ['.']
let g:snipMateAllowMatchingDot = 0
let g:pymode_rope = 1
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_lookup_project = 0  " don't have rope look in parent dirs
let g:pymode_breakpoint = 0  " disable breakpoint stuff with <Leader>b
let g:pymode_virtualenv = 0  " disable virtualenv detection
let g:pymode_doc = 0  " disable K to show documentation
" Turn off annoying PyLint Quickfix window
"let pymode_lint_hold=0
" let g:pymode_lint_on_fly = 0
"let pymode_lint_cwindow=0
" Skip errors and warnings
"let g:pymode_lint_ignore = "E501,W002" "...  or "E2,W"
" let g:pymode_lint_ignore = "C0110,W0511,W1201,W0703,E712"

" tab completion. choose between youcompleteme and deoplete
" disable deoplete (formerly neocomplete)
let g:deoplete#enable_at_startup = 0
" tab completion via YouCompleteMe (YCM)
let g:ycm_extra_conf_globlist = ['~/s/*','!~/s/scratch/*']


" YouCompleteMe and UltiSnips compatibility:
" https://github.com/Valloric/YouCompleteMe/issues/36#issuecomment-171966710
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction
function! g:UltiSnips_Reverse()
  call UltiSnips#JumpBackwards()
  if g:ulti_jump_backwards_res == 0
    return "\<C-P>"
  endif
  return ""
endfunction
if !exists("g:UltiSnipsJumpForwardTrigger")
  let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif
if !exists("g:UltiSnipsJumpBackwardTrigger")
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif
au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger     . " <C-R>=g:UltiSnips_Complete()<cr>"
au InsertEnter * exec "inoremap <silent> " .     g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"


" Spell check
set spell

" Window split shortcuts https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
