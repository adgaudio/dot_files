"call janus#disable_plugin('nodejs', "i get this error message: Function DetectNode already exists, add ! to replace it")
"call janus#disable_plugin('pep8', "geezus this plugin sucks. its too strict")
call janus#disable_plugin('syntastic', "vim is slow to save files at the moment")

let mapleader = ","
noremap ; :

" Enable repeated indenting in visual mode
vmap < <gv
vmap > >gv

" Emacs-like beginning and end of line
inoremap <C-a> <Esc>^i
nnoremap <C-a> ^
inoremap <C-e> <Esc>$i
nnoremap <C-e> $

" Tab Next/Prev
nnoremap H :tabp<CR>
nnoremap L :tabn<CR>

" Don't backup files edited in /tmp, so I can edit crontab
set backupskip=/tmp/*,/private/tmp/*"

" System Clipboard
let s:uname = system("echo -n \"$(uname)\"")
if !v:shell_error && s:uname == "Darwin"
  set clipboard=unnamed "this works on osx
else
  set clipboard=unnamedplus "Integration with system clipboard. + is copy and * is select
endif

"folding settings " toggle folds with za  ... also use zR and zM and zr and zm
set foldmethod=manual   "fold based on indent
set foldnestmax=3       "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

set mouse=a " Use mouse in all modes

" When opening a file in the command bar, tab completion behaves like bash
" autocomplete
set wildmode=longest,list,full
set wildmenu

" Freak out when lines are more than 80 chars long
autocmd FileType python highlight OverLength ctermbg=red ctermfg=white guibg=#592929
autocmd FileType python match OverLength /\%80v.\+/
set colorcolumn=80

" Turn off annoying PyLint Quickfix window
"let pymode_lint_hold=0
"let pymode_lint_cwindow=0
" Skip errors and warnings
"let g:pymode_lint_ignore = "E501,W002" "...  or "E2,W"
let g:pymode_lint_ignore = "C0110,W0511,W1201,W0703"
let g:pymode_rope_auto_project = 1
let g:snipMateAllowMatchingDot = 0

" Scala settings
let g:scala_sort_across_groups=1

" Vimux (commands to create a tmux pane underneath vim and run shell commands)
" Run the current file
map <Leader>vo :call VimuxRunCommand("")<CR>
map <Leader>vr :call VimuxRunCommand("clear; echo Executing: " . bufname("%") . " ; " . bufname("%"))<CR>
" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>
" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>
" Close vim tmux runner opened by VimuxRunCommand
map <Leader>vq :VimuxCloseRunner<CR>
" Interrupt any command running in the runner pane
map <Leader>vx :VimuxInterruptRunner<CR>
" Zoom the runner pane (use <bind-key> z to restore runner pane)
map <Leader>vz :call VimuxZoomRunner()<CR>
function! VimuxSlime()
  call VimuxSendText(@v)
  call VimuxSendKeys("Enter")
endfunction
" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <Leader>vs "vy :call VimuxSlime()<CR>
" Select current line and send it to tmux
nmap <Leader>vs V,vs
" Select current block (paragraph) and send it to tmux
nmap <Leader>vb vip,vs<CR>
let g:VimuxUseNearestPane = 1
