#! /usr/bin/env python

import os
import sys
from subprocess import check_call
join = os.path.join

def maybe(f):
    def tryer(*args, **kwargs):
        try:
            f(*args, **kwargs)
        except Exception as e:
            print('    %s' % e)
    return tryer


# dest dir
d = os.environ['HOME']

@maybe
def symlink(x, y):
    # source dir
    s = os.path.realpath(os.path.dirname(__file__))

    src = join(s, x)
    dest = join(d, y)
    print(src + '......' + dest)
    if os.path.exists(src):
        os.symlink(src, dest)
    else:
        print("    DOESN'T EXIST: %s" % src)


def install_vim():
    # Install vim plugin dependencies
    # os.system('deactivate ; pip install jedi')
    # Install janus
    s = os.path.realpath(os.path.dirname(__file__))
    os.system(join(s, 'vim/bootstrap_janus'))

#########################################
#########################################

if __name__ == '__main__':
    import argparse as ap
    p = ap.ArgumentParser()
    p.add_argument('--vim', action='store_true')
    p.add_argument('--docker', action='store_true')
    p.add_argument('--symlinks', action='store_true')
    p.add_argument('--bootstrap_init_host', action='store_true')
    NS = p.parse_args()

    if NS.bootstrap_init_host:
        # you may not want to do this unless you are me!

        check_call((
            """echo '. .bash_aliases"' >> ~/.bashrc ;"""
            """echo '. .bash_functions"' >> ~/.bashrc"""
            """echo 'export PATH="$HOME/bin":"$PATH"' >> ~/.bashrc"""
            """echo 'export GIT_EDITOR="vi"' >> ~/.bashrc"""
        ), shell=True)
        check_call(
            ('sudo mkdir -p /home/dev/s ;'
             'sudo chown -R `id -un`:`id -gn` /home/dev ;'
             'ln -bfs /home/dev/s ~/s ;'
             'git clone git@github.com:adgaudio/dot_files.git ~/s/dot_files;'
             ' ln -bfs ~/s/dot_files/bash_aliases ~/.bash_aliases ; '
             ' ln -bfs ~/s/dot_files/bash_functions ~/.bash_functions ; '
             ' ln -bfs ~/s/dot_files/gitconfig ~/.gitconfig ; '
             ' ln -bfs ~/s/dot_files/tmux/tmux.conf ~/.tmux.conf ; '
             ),
            shell=True)
        if NS.docker:
            check_call(' cd ~/s/dot_files ; ./install --docker', shell=True)

    if NS.symlinks:
        symlink("ackrc", ".ackrc")

        symlink("bash_aliases", ".bash_aliases")
        symlink("bash_functions", ".bash_functions")
        symlink("bash_extras", ".bash_extras")
        symlink("profile", ".profile")
        symlink("zshrc", ".zshrc")
        symlink("zsh_tab_completion", ".zsh_tab_completion")
        symlink("zshrc.zni", ".zshrc.zni")
        symlink("z.sh", ".z.sh")

        symlink("gitconfig", ".gitconfig")
        symlink("inputrc", ".inputrc")
        symlink("python/pythonrc.py", ".pythonrc.py")
        symlink("Rprofile", ".Rprofile")

        _ipy_dir = join(d, ".ipython/profile_default/startup")
        if not os.path.exists(_ipy_dir):
            os.makedirs(_ipy_dir)
        symlink("ipython_startup.ipy", join(_ipy_dir, "ipython_startup.ipy"))

        symlink("tmux/tmux.conf", ".tmux.conf")
        symlink("tmux/tmux_osx.conf", ".tmux_osx.conf")
        if 'linux' in sys.platform.lower():
            symlink("Xmodmap", ".Xmodmap")

    if NS.vim:
        install_vim()
    # Install realiaser (for cmd prompt)
    # os.system('gem install realiaser')  # gem update realiaser

    if NS.docker and not NS.bootstrap_init_host:
        if os.environ.get('BOX_NAME'):
            print(
                "NOT Building docker devbox image because it looks"
                " like I'm inside a docker container already")
        else:
            files = sorted(os.listdir(join(
                os.path.dirname(__file__), 'dockerfiles')))
            # build devbox and printer and ...
            for fn in files:
                fn = fn.split('.', 1)[1]
                cmd = (
                    "docker build -t adgaudio/{0} "\
                    "-f dockerfiles/Dockerfile.{0} .").format(fn)
                print(cmd)
                check_call(cmd, shell=True)
