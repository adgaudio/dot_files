# Use C-p prefix to issue tmux cmds and C-p C-p to send prefix to nested tmux session
unbind-key C-b
set -g prefix C-o
bind C-o send-prefix
#set -g prefix2 C-b
#bind C-b send-prefix -2

# Command Prompt
unbind \; 
bind \; command-prompt # colon also works

# Help screen: rebind list-keys window into a new pane 
bind ? split-window -h 'exec tmux list-keys | less'

# Client/Session handling
bind -r N switch-client -n # next session
bind -r P switch-client -p # prev session
bind I switch-client -l    # last session
bind C command-prompt -p "new-session name (and other params)" "new-session -s %%"
bind X command-prompt -p "kill-session -t ??" "kill-session -t %%"

# Window handling
bind -r n next-window
bind -r p previous-window
bind -r u command-prompt -p "link-window <params>" "link-window %%"
bind -r C-u unlink-window
bind c new-window -c '#{pane_current_path}'

# Pane handling
bind -r o select-pane -t :.+ # next pane
bind -r C-o select-pane -t :.- # prev pane
bind -r / display-panes \; select-pane -t :.  # move cursor to pane by index
bind -r C-h join-pane -hs :. -t :- # push current pane to the left
bind -r C-l join-pane -hs :. -t :+ # push current pane to the right
bind -r M-L join-pane -hs :+ -t :. # pull right window's pane into current window 
bind -r M-H join-pane -hs :- -t :. # pull left window's pane into current window 
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r | split-window -c '#{pane_current_path}' -h
bind -r _ split-window -c '#{pane_current_path}' -v
bind k last-pane
bind S setw synchronize-panes # Toggle synchronized input to all panes in current window
bind -r Space next-layout

# Buffer handling
bind v paste-buffer
bind y run-shell 'tmux show-buffer |  perl -pe "chomp if eof" |  xsel -i -b'
bind -r - delete-buffer
bind = list-buffers
bind b command-prompt -p "buffer id?" "paste-buffer -b %%"
#bind-key C-P pipe-pane -o 'cat >>~/tmuxout.`date +%H:%M:%S`.#S-#I-#P' # log pane's output.  Not necessary if you use the automated session backup program provided in the tmux src.
set -g buffer-limit 100

# Window Monitoring
# set -g visual-content on
set -g visual-silence on
setw -g monitor-activity on # Notify when activity in another window
bind C-f command-prompt -p "monitor-content <params>" "setw monitor-content %%"
bind C-m command-prompt -p "monitor-silence interval?" "setw monitor-silence %%"

# Reload key
bind r source-file ~/.tmux.conf

# open a man page in new pane
bind m command-prompt -p "man page:" "split-window -h 'exec man %%'"

# Mouse Handling # Warning: surprising results on some terminals, 
# but super useful when works!
set -g mouse on
# set -g mouse-select-window on
# set -g mouse-select-pane on
# set -g mouse-resize-pane ok
# set -g mode-mouse on # mouse scrolling through history buffer

# History buffer limit
set -g history-limit 5000

# Set status bar colors
set -g status-bg black
set -g status-fg white
set -g status-left '#[fg=green][#S]'
set -g status-left-length 100

# Clock Settings
set -g clock-mode-style 12

# Vi or emacs style keys...
setw -g mode-keys vi

# Tmux messages have longer timeout
set -g display-time 2000

# Start new windows at index=1 (rather than 0)
set -g base-index 1

# Change window size to fit window width as often as possible
# if 2 clients see the same window, window is size of smallest client's window width
setw -g aggressive-resize on

# Enable multiple cmds entered simultaneously w/o prefix key
setw -g repeat-time 200

# I don't use the escape key in my key sequeneces
set -g escape-time 0

# Send text to all windows in given session
bind C-e command-prompt -p "session?,message?" "run-shell \"tmux list-windows -t %1 \| cut -d: -f1\|xargs -I\{\} tmux send-keys -t %1:\{\} %2\""

set-option -g default-shell $SHELL

# Override defaults with OSX Specific Settings
if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux_osx.conf'

# tmux-resurrect (to save and restore sessions)
# run-shell ~/.tmux-resurrect/resurrect.tmux
set -g @resurrect-save 'e'
set -g @resurrect-restore 'R'
